syntax = "proto3";

package pbx;

import "google/protobuf/timestamp.proto";

// import "google/protobuf/wrappers.proto";

message RequestHeader {
  string platform = 1;
  string domain = 2;
  string client_key = 3;
}

message Empty {} // Parameter for parameterless rpc services

/* ----------------------------------------
 * AdminUser Model
 * ----------------------------------------
 */
message AdminUser {
  string id = 1;
  string username = 2;
  string password = 3;
  string fullname = 4;
  string email = 5;
  bool account_access = 6;
  int32 login_counter = 7;
  google.protobuf.Timestamp last_login = 8;
  google.protobuf.Timestamp account_expiry = 9;
  string photo = 10;
  bool pwd_expiry = 11;
  google.protobuf.Timestamp pwd_expiry_time = 12;
  int32 pwd_life_in_days = 13;
  bool force_pwd_change = 14;
  string institution = 15;
}

message AdminUserFindRequest {
  string filter = 1;
  RequestHeader header = 2;
}

message AdminUserFindResponse {
  repeated AdminUser adminUsers = 1;
}

message AdminUserFindOneRequest {
  string filter = 1;
  RequestHeader header = 2;
}

message AdminUserFindOneResponse {
  AdminUser adminUser = 1;
}

message AdminUserCreateRequest {
  AdminUser adminUser = 1;
  RequestHeader header = 2;
}

message AdminUserCreateResponse {
  AdminUser adminUser = 1;
}

message AdminUserFindByIdRequest {
  string id = 1;
  string filter = 2;
  RequestHeader header = 3;
}

message AdminUserFindByIdResponse {
  AdminUser adminUser = 1;
}

message AdminUserCountRequest {
  string filter = 1;
  RequestHeader header = 2;
}

message AdminUserCountResponse {
  int64 count = 1;
}

message AdminUserUpdateRequest {
  string where = 1;
  AdminUser adminUser = 2;
  RequestHeader header = 3;
}

message AdminUserUpdateResponse {
  bool updated = 1;
}

message AdminUserDeleteByIdRequest {
  string id = 1;
  RequestHeader header = 3;
}

message AdminUserDeleteByIdResponse {
  AdminUser adminUser = 1;
}

message AdminUserDeleteWithWhereRequest {
  string where = 1;
  RequestHeader header = 2;
}

message AdminUserDeleteWithWhereResponse {
  bool deleted = 1;
}

/* ----------------------------------------
 * AuthRole Model
 * ----------------------------------------
 */
message AuthRole {
  string id = 1;
  string name = 2;
  string description = 3;
  bool default = 4;
  bool status = 5;
}


/* ----------------------------------------
 * Auth Model
 * ----------------------------------------
 */
message AuthLoginRequest {
  string username = 1;
  string password = 2;
  RequestHeader header = 3;
}

message AuthLoginResponse {
  string token = 1;
  string user_id = 2;
  repeated AuthRole roles = 3;
  bool force_pwd_change = 4;
}

message AuthLogoutRequest {
  string token = 1;
  RequestHeader header = 2;
}

message AuthLogoutResponse {
  string message = 1;
}

message AuthResetPasswordRequest {
  string old_password = 1;
  string new_password = 2;
  RequestHeader header = 3;
}

message AuthResetPasswordResponse {
  string message = 1;
}

message AuthorisationRequest {
    string userId = 1; //remove this
    string token = 2;
    RequestHeader header = 3;

}

message AuthorisationResponse {
    bool authorised = 1;
}


service BeaconIamService {
  // Auth
  rpc AuthLogin(AuthLoginRequest) returns (AuthLoginResponse);
  rpc AuthLogout(AuthLogoutRequest) returns (AuthLogoutResponse);
  rpc AuthResetPassword(AuthResetPasswordRequest) returns (AuthResetPasswordResponse);

  rpc RequestAuthorisation(AuthorisationRequest) returns (AuthorisationResponse) {}

  // AdminUser
  rpc AdminUserCreate (AdminUserCreateRequest) returns (AdminUserCreateResponse);
  rpc AdminUserFind (AdminUserFindRequest) returns (AdminUserFindResponse);
  rpc AdminUserFindOne (AdminUserFindOneRequest) returns (AdminUserFindOneResponse);
  rpc AdminUserFindByID (AdminUserFindByIdRequest) returns (AdminUserFindByIdResponse);
  rpc AdminUserCount (AdminUserCountRequest) returns (AdminUserCountResponse);
  rpc AdminUserUpdate (AdminUserUpdateRequest) returns (AdminUserUpdateResponse);
  rpc AdminUserDeleteByID (AdminUserDeleteByIdRequest) returns (AdminUserDeleteByIdResponse);
  rpc AdminUserDeleteWithWhere (AdminUserDeleteWithWhereRequest) returns (AdminUserDeleteWithWhereResponse);
}
